DRF POST API VIEW:

# JsonResponse: Drf post api Not work due to csrf token 


i/p:
    serializers.py:
        def get_my_discount(self, obj):
        try:
            return obj.get_discount()
        except:
            return None

    views.py:
         serializer = ProductSerializer(data=request.data)
        if serializer.is_valid():
            print(serializer.data)     #{'title': 'hello post request', 'content': None, 'my_discount': None}
            data = serializer.data


o/p:
    basic.py:
        get_response = requests.post(end_point, json={"title": "hello post request"}, params={"product_id": 123}) 
        print(get_response.text)
        print(get_response.json())

    o/p:
        {"title":"hello post request","content":null,"my_discount":null}
        {'title': 'hello post request', 'content': None, 'my_discount': None}


#-----------------------------------------------------------------------------------------------------
i/p:
    views.py:
        serializer = ProductSerializer(data=request.data)
        if serializer.is_valid():
            data = serializer.save()
            print(data)                         # Product object (4)
            return Response(serializer.data)

o/p:
    basic.py:
        get_response = requests.post(end_point, json={"title": "hello post request"}, params={"product_id": 123}) 
        print(get_response.text)
        print(get_response.json())

    basic - o/p: 
        {"title":"hello post request","content":null,"price":"0.00",
        "sale_price":"0.00","get_discount":"0.00","my_discount":"0.00"}

        {'title': 'hello post request', 'content': None, 'price': '0.00', 
        'sale_price': '0.00', 'get_discount': '0.00', 'my_discount': '0.00'}


#----------------------------------------------------------------------------------------------------------
i/p :
    serializer.py:
        def get_my_discount(self, obj):
        return obj.get_discount()

o/p:
basics.py:
    Gives: Error raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)
    requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

    Because: Have no Object created...


#-----------------------------------------------------------------------------------------------------------
    Serializer Method Field Always gives you Field output 

i/p :
    serializer.py:
    def get_my_discount(self, obj):
        if not hasattr(obj, 'id'):
            return None
        if not isinstance(obj, Product):
            return None
        return obj.get_discount()


o/p:
basics.py:
    {"title":"hello post request","content":null,"my_discount":null}
    {'title': 'hello post request', 'content': None, 'my_discount': None}

#------------------------------------------------------------------------------------
i/p:
    models.py:
        title = models.CharField(max_length=50) # had no null=True

    views.py:
        if serializer.is_valid():
                # data = serializer.save()
                # print(data)
                print(serializer.data)
                return Response(serializer.data)
            return Response({"invalid data:": "Not a good Data"}, status=status.HTTP_400_BAD_REQUEST)

o/p:
    basic.py:
        get_response = requests.post(end_point, json={"content": "hello post request"}, 
                                    params={"product_id": 123}) 
        print(get_response.text)
        print(get_response.json())

    o/p:
        {"invalid data:":"Not a good Data"}
        {'invalid data:': 'Not a good Data'}


#----------------------------------------------------------------------------------------------
i/p:
    views.py:
        if serializer.is_valid(raise_exception=True):
                
o/p:
    basic.py:
        get_response = requests.post(end_point, json={"content": "hello post request"}, 
                                     params={"product_id": 123}) 
        print(get_response.text)
        print(get_response.json())

    o/p:
        {"title":["This field is required."]}
        {'title': ['This field is required.']}